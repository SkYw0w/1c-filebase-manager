#!/usr/bin/env oscript
// Скрипт для получения списка информационных баз

#Использовать fs

Процедура ВыполнитьСкрипт()
    
    МассивБаз = Новый Массив;
    
    Попытка
        // Путь к файлу списка баз 1С
        ПутьКСпискуБаз = ОбъединитьПути(КаталогДанныхПользователя(), "1C", "1CEStart", "ibases.v8i");
        
        Если НЕ ФС.ФайлСуществует(ПутьКСпискуБаз) Тогда
            // Если файла нет - возвращаем пустой массив
            Сообщить("[]");
            Возврат;
        КонецЕсли;
        
        // Читаем файл - пробуем разные кодировки
        Содержимое = "";
        
        // Сначала UTF-8 без BOM
        Попытка
            Чтение = Новый ЧтениеТекста(ПутьКСпискуБаз, КодировкаТекста.UTF8NoBOM);
            Содержимое = Чтение.Прочитать();
            Чтение.Закрыть();
        Исключение
            // Если не получилось, пробуем UTF-8 с BOM
            Попытка
                Чтение = Новый ЧтениеТекста(ПутьКСпискуБаз, КодировкаТекста.UTF8);
                Содержимое = Чтение.Прочитать();
                Чтение.Закрыть();
            Исключение
                // В крайнем случае ANSI (Windows-1251)
                Чтение = Новый ЧтениеТекста(ПутьКСпискуБаз, КодировкаТекста.ANSI);
                Содержимое = Чтение.Прочитать();
                Чтение.Закрыть();
            КонецПопытки;
        КонецПопытки;
        
        // Парсим файл (простой парсинг секций)
        СписокСекций = РазобратьФайлИБ(Содержимое);
        
        Для Каждого Секция Из СписокСекций Цикл
            Если Секция.Свойство("Connect") И Секция.Свойство("Name") Тогда
                
                // ТОЛЬКО ФАЙЛОВЫЕ БАЗЫ! Пропускаем серверные (Srvr=)
                Если СтрНайти(Секция.Connect, "Srvr=") > 0 Тогда
                    Продолжить;
                КонецЕсли;
                
                // Извлекаем путь из строки подключения
                ПутьКБазе = ИзвлечьПутьИзСтрокиСоединения(Секция.Connect);
                
                ИнфоБаза = Новый Структура;
                ИнфоБаза.Вставить("name", Секция.Name);
                ИнфоБаза.Вставить("path", ПутьКБазе);
                
                Если ПутьКБазе <> "" И ФС.КаталогСуществует(ПутьКБазе) Тогда
                    Размер = ПолучитьРазмерКаталога(ПутьКБазе);
                    ДатаИзменения = ПолучитьДатуИзменения(ПутьКБазе);
                    
                    ИнфоБаза.Вставить("size", Размер);
                    ИнфоБаза.Вставить("lastModified", ДатаИзменения);
                Иначе
                    ИнфоБаза.Вставить("size", 0);
                    ИнфоБаза.Вставить("lastModified", XMLСтрока(ТекущаяДата()));
                КонецЕсли;
                
                Если Секция.Свойство("ID") Тогда
                    ИнфоБаза.Вставить("guid", Секция.ID);
                КонецЕсли;
                
                МассивБаз.Добавить(ИнфоБаза);
            КонецЕсли;
        КонецЦикла;
        
    Исключение
        // Если ошибка - возвращаем пустой массив
        Сообщить("[]");
        Возврат;
    КонецПопытки;
    
    // Выводим JSON (используем стандартное экранирование - JavaScript правильно декодирует)
    JSON = Новый ЗаписьJSON;
    JSON.УстановитьСтроку();
    ЗаписатьJSON(JSON, МассивБаз);
    
    Сообщить(JSON.Закрыть());
    
КонецПроцедуры

Функция РазобратьФайлИБ(Содержимое)
    
    Результат = Новый Массив;
    ТекущаяСекция = Неопределено;
    ИмяСекции = "";
    
    Строки = СтрРазделить(Содержимое, Символы.ПС, Ложь);
    
    Для Каждого Строка Из Строки Цикл
        Строка = СокрЛП(Строка);
        
        Если СтрНачинаетсяС(Строка, "[") И СтрЗаканчиваетсяНа(Строка, "]") Тогда
            // Новая секция
            Если ТекущаяСекция <> Неопределено Тогда
                Результат.Добавить(ТекущаяСекция);
            КонецЕсли;
            
            // Извлекаем имя секции (это и есть имя базы!)
            ИмяСекции = Сред(Строка, 2, СтрДлина(Строка) - 2);
            
            ТекущаяСекция = Новый Структура;
            ТекущаяСекция.Вставить("Name", ИмяСекции);
            
        ИначеЕсли СтрНайти(Строка, "=") > 0 И ТекущаяСекция <> Неопределено Тогда
            // Параметр - разбиваем только по первому "="
            ПозицияРавно = СтрНайти(Строка, "=");
            Ключ = СокрЛП(Лев(Строка, ПозицияРавно - 1));
            Значение = СокрЛП(Сред(Строка, ПозицияРавно + 1));
            ТекущаяСекция.Вставить(Ключ, Значение);
        КонецЕсли;
    КонецЦикла;
    
    // Добавляем последнюю секцию
    Если ТекущаяСекция <> Неопределено Тогда
        Результат.Добавить(ТекущаяСекция);
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

Функция ИзвлечьПутьИзСтрокиСоединения(СтрокаСоединения)
    
    // Извлекаем путь из строки вида File="путь"; или File="путь" или File=путь
    // ТОЛЬКО для файловых баз (серверные отфильтрованы ранее)
    
    // Убираем лишние пробелы
    СтрокаСоединения = СокрЛП(СтрокаСоединения);
    
    Если СтрНайти(СтрокаСоединения, "File=") > 0 Тогда
        // Находим позицию после File=
        Начало = СтрНайти(СтрокаСоединения, "File=");
        Остаток = Сред(СтрокаСоединения, Начало + 5); // 5 = длина "File="
        
        // Убираем кавычки и точку с запятой
        Остаток = СтрЗаменить(Остаток, """", "");
        Остаток = СтрЗаменить(Остаток, ";", "");
        Остаток = СокрЛП(Остаток);
        
        Возврат Остаток;
    КонецЕсли;
    
    Возврат "";
    
КонецФункции

Функция ПолучитьРазмерКаталога(ПутьККаталогу)
    
    Размер = 0;
    
    Попытка
        Файлы = НайтиФайлы(ПутьККаталогу, ПолучитьМаскуВсеФайлы(), Истина);
        
        Для Каждого Файл Из Файлы Цикл
            Если Не Файл.ЭтоКаталог() Тогда
                Размер = Размер + Файл.Размер();
            КонецЕсли;
        КонецЦикла;
    Исключение
        // Игнорируем ошибки доступа
    КонецПопытки;
    
    Возврат Размер;
    
КонецФункции

Функция ПолучитьДатуИзменения(ПутьККаталогу)
    
    Попытка
        Файл = Новый Файл(ПутьККаталогу);
        Возврат XMLСтрока(Файл.ПолучитьВремяИзменения());
    Исключение
        Возврат XMLСтрока(ТекущаяДата());
    КонецПопытки;
    
КонецФункции

Функция КаталогДанныхПользователя()
    
    // Для Windows
    Возврат ПолучитьПеременнуюСреды("APPDATA");
    
КонецФункции

ВыполнитьСкрипт();
